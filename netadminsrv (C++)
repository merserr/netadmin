

#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/wait.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <syslog.h>
#include <signal.h>

#include <vector>
#include <string>
#include <fstream>
#include <iostream>
#include <mysql.h>



using namespace std;

const char *usernamecis = "admin\r\n";
const char *passwordcis = "passwordcisco\r\n";
const char *passwordenablecis = "passwordenablecisco\r\n";
const char *ipaddresscis = "192.168.1.1";

    MYSQL *conn0;
    MYSQL *conn;
    MYSQL *conn2;
    MYSQL_RES *res;
    MYSQL_ROW rowsql;

      const char *server = "localhost";
      const char *user = "user";
      const char *password = "password";
      const char *database = "netadmin";
      const char *table = "netarp";

    string answer;
    string stranswer;
    string findword;
    string cmd;
    string sqlquery0;
    string sqlquery1;
    string ip_address;
    string age;
    string mac_address;
    string manufactur;
    string name;
    string newipaddr;
    string newmacaddr;
    string newage;
    string newname;

    decltype(answer.cbegin()) iter;
    size_t position = 0;
    int idcount;
    int masslengh;
    int strings_counter=0;

vector <string> list; //наш вектор с элементами
int current_element; //номер текущего элемента
int max_client=100;
string clientproperty[999][5];
int current_client=0;
int current_client_line=0;
int row;
bool windowsetting=false;
bool windowsettingmem=false;
string subipaddress, submacaddress, submanufactur, subname;
  int ch = 0;
int screenmode;

void get_arp_from_cisco();
void recognize_arp_table(string);
void recognize_string_arp_table(string);
void sql_read_from_table_and_compare(string);
void get_name_from_sql();
void prepare_answer_for_sending();
void clear_previos_window();
int ncount=0;


//-----------------------------------------------------------
class tcpdaemon 
{
    protected:
    void daemonize();
    void mainloop();
    void operate(int fd);
    static void sighandler(int signum);

    public:
    void exec();
};

void tcpdaemon::sighandler(int signum)
{
    waitpid(0, 0, WNOHANG);
}

void tcpdaemon::daemonize() 
{
    int pid;
    struct sigaction sa;

    cout << "Server start ok ! " << flush;
    pid = fork();

    switch(pid)
    {
    case 0:
        setsid();
        chdir("/");

        close(0);
        close(1);
        close(2);

        memset(&sa, 0, sizeof(sa));
        sa.sa_handler = &sighandler;
        sigaction(SIGCHLD, &sa, 0);

        openlog("tcp_daemon", 0, LOG_USER);
        mainloop();
        closelog();

        exit(0);

    case -1:
        cout << "fork() error" << endl;
        break;

    default:
        cout << "ok. PID=" << pid << endl;
        break;
    }
}

void tcpdaemon::mainloop()
{
    int sockfd, fd;
    struct sockaddr_in sa;
    socklen_t n;
    sockfd = socket(PF_INET, SOCK_STREAM, 0);

    if(sockfd != -1)
    {
       memset(&sa, 0, sizeof(sa));
       sa.sin_family = AF_INET;
       sa.sin_addr.s_addr = htonl(INADDR_ANY);
       sa.sin_port = htons(1688);

      if(::bind(sockfd, (struct sockaddr *)&sa, sizeof sa) != -1)
      {
        while(1) {
          if(!listen(sockfd, 5))
          {
            n = sizeof(sa);
            if((fd = accept(sockfd, (struct sockaddr *) &sa, &n)) != -1)
            {
              syslog(LOG_NOTICE, "connection from %s", inet_ntoa(sa.sin_addr));
        //      cout << "connection from " << inet_ntoa(sa.sin_addr) << endl;

              if(!fork())
              {
                operate(fd);
              }
            }
          }
        }
      }
    }
}

void tcpdaemon::operate(int fd)
{
    char c;
    bool finished;
    string cmd, answer;
    finished = false;

    write(fd, answer.c_str(), answer.size());

    while(!finished)
    {
    cmd = answer = "";
    while(!finished) {
        finished = read(fd, &c, 1) != 1;

        if(c == '\n') break; else
        if(c != '\r') cmd += c;
    }

    if(!finished && !cmd.empty())
    {
        if(cmd == "info")
        {
//           answer = "--netadminserver work new!-- :)";
           get_arp_from_cisco();
//           answer = "0000000000000000";
           prepare_answer_for_sending();
           answer = stranswer;
        }
        else if(cmd == "version")
        {
           answer = "version 1.0";
        }
        else if(cmd == "quit"||cmd == "exit")
        {
           shutdown(fd, 2);
           close(fd);
           finished = true;
        }
        else
            {
            answer = "--command not recognize--";
        }
    }

    if(!finished && !answer.empty())
    {
//        answer = "answer_from_srv: "+answer+"\n\r";
        answer = answer+"\n\r";
        write(fd, answer.c_str(), answer.size());
    }
    }

    exit(0);
}

void tcpdaemon::exec()
{
    daemonize();
}
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
void get_arp_from_cisco()
{

//  cout << "==== GO! ====";
  string cmd, answer;
  string command;
  bool finished;
  char c;
  finished = false;
  int n = 0;

  int s;
  int bytes;
  struct sockaddr_in sa;
  char buffer[BUFSIZ+1];
//  cout << "begin" << endl;


  time_t time1 = time(0);
  time_t timermemory = time(0);

  ofstream fout("/var/log/example.log", ios_base::app);
  fout << "netadmin send command " << asctime(localtime(&time1));
  fout.close();

  if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {

    ofstream fout("/var/log/example.log", ios_base::app);
    fout << asctime(localtime(&time1)) << "error socket2";
    fout.close();

    perror("socket");
//    return 1;
  }

  bzero(&sa, sizeof sa);
  sa.sin_family = AF_INET;
  sa.sin_port = htons(23);
  sa.sin_addr.s_addr = inet_addr(ipaddresscis);

//  sa.sin_addr.s_addr = htonl((((((192 << 8) | 168) << 8) | 1) << 8) | 108);


  if (connect(s, (struct sockaddr *)&sa, sizeof sa) < 0) {

    ofstream fout("/var/log/netadmin.log", ios_base::app);
    fout << asctime(localtime(&time1)) << "error connect2";
    fout.close();

    perror("connect");
    close(s);
  }

//-------------------------------------------------------

//-------------------------------------------------------
while(n == 0){
//    cout << "0" << endl;
    read(s, &c, 1);
    answer += c;
//    cout << answer << endl;
    findword = "Username: ";
    iter = search(answer.cbegin(), answer.cend(), findword.cbegin(), findword.cend());
    position = distance(answer.cbegin(), iter);
    if(position < answer.length()){ //cout<<"===== Ok, founde " << findword << endl;
    answer = "";
       n = 1;
       break;
       }
    }
//...................
while(n==1){
//    cout << "1" << endl;
    answer = "";
    cmd = usernamecis;
    write(s, cmd.c_str(), cmd.size());
    //cout << "send " << cmd << endl;
    n = 2;
    break;
    }
//...................
while(n == 2){
//    cout << "2" << endl;
    read(s, &c, 1);
    answer += c;
//    cout << answer << endl;
    findword = "Password: ";
    iter = search(answer.cbegin(), answer.cend(), findword.cbegin(), findword.cend());
    position = distance(answer.cbegin(), iter);
    if(position < answer.length()){//cout<<"===== Ok, founde " << findword << endl;
       answer = "";
       n = 3;
       break;
       }
    }
//...................
while(n==3){
//    cout << "3" << endl;
    answer = "";
    cmd = passwordcis;
    write(s, cmd.c_str(), cmd.size());
    //cout << "send " << cmd << endl;
    n = 4;
    break;
    }
//...................
while(n == 4){
//    cout << "4" << endl;
    read(s, &c, 1);
    answer += c;
//    cout << answer << endl;
    findword = "3925-rtr#";
    iter = search(answer.cbegin(), answer.cend(), findword.cbegin(), findword.cend());
    position = distance(answer.cbegin(), iter);
    if(position < answer.length()){//cout<<"===== Ok, founde " << findword << endl;
       answer = "";
       n = 11;//old value 5
       break;
       }
    }
//...................
while(n==5){
//    cout << "5" << endl;
    answer = "";
    cmd = "enable\r\n";
    write(s, cmd.c_str(), cmd.size());
    //cout << "send " << cmd << endl;
    n = 6;
    break;
    }
//...................
while(n == 6){
//    cout << "6" << endl;
    read(s, &c, 1);
    answer += c;
    findword = "Password: ";
    iter = search(answer.cbegin(), answer.cend(), findword.cbegin(), findword.cend());
    position = distance(answer.cbegin(), iter);
    if(position < answer.length()){//cout<<"===== Ok, founde " << findword << endl;
       answer = "";
       n = 7;
       break;
       }
    }
    //...............
while(n==7){
//    cout << "7" << endl;
    answer = "";
    cmd = passwordenablecis;
    write(s, cmd.c_str(), cmd.size());
    //cout << "send " << cmd << endl;
    n = 8;
    break;
    }
//...................
while(n == 8){
//    cout << "8" << endl;
    read(s, &c, 1);
    answer += c;

    findword = "3925-rtr#";
    iter = search(answer.cbegin(), answer.cend(), findword.cbegin(), findword.cend());
    position = distance(answer.cbegin(), iter);
    if(position < answer.length()){
       //cout<<"===== Ok, founde " << findword << endl;
       answer = "";
       n = 9;
       break;
       }
    }
//...................
while(n== 9){
//    cout << "9" << endl;
    cmd="conf t\r\n";
    write(s, cmd.c_str(), cmd.size());
    //cout << "send " << cmd << endl;
    n = 10;
    }
//...................
while(n == 10){
//    cout << "10" << endl;
    read(s, &c, 1);
    answer += c;

    findword = "3925-rtr(config)#";
    iter = search(answer.cbegin(), answer.cend(), findword.cbegin(), findword.cend());
    position = distance(answer.cbegin(), iter);
    if(position < answer.length()){
       //cout<<"===== Ok, founde " << findword << endl;
       answer = "";
       n = 11;
       break;
       }
    }
//...................

while(n== 11){
//    cout << "11" << endl;
//    command = "mac address static 0016.E8B7.7833 vlan 812 drop";
    command = "sh arp";
    cmd=command+"\r\n";
    write(s, cmd.c_str(), cmd.size());
    //cout << "send: " << cmd << endl;
    answer="";

    n = 12;
    }
//...................
while(n == 12){
//    cout << "12" << endl;
    read(s, &c, 1);
    answer += c;
//    cout << answer << endl;
    findword = "3925-rtr#";
    iter = search(answer.cbegin(), answer.cend(), findword.cbegin(), findword.cend());
    position = distance(answer.cbegin(), iter);
    if(position < answer.length()){
//       cout<<"===== Ok, founde " << findword << endl;
//       cout<<answer<<endl;
       recognize_string_arp_table(answer);
       answer = "";
       n = 13;
       break;
       }
    }
//...................

while(n== 13){
//    cout << "13" << endl;
    cmd="exit\r\n";
//    write(s, cmd.c_str(), cmd.size());
//    write(s, cmd.c_str(), cmd.size());
    write(s, cmd.c_str(), cmd.size());
    //cout << "send " << cmd << endl;
    n = 0;
    close(s);
    }
//...................

}
//--------end void get_arp_from_cisco---------------------------------------------------

//--------------------------------------------------------------------------------------

void recognize_string_arp_table(string arptable){
//cout<<"recognize_string_arp_table"<<endl;
    conn = mysql_init(NULL);

    if (!mysql_real_connect(conn, server,user, password, database, 0, NULL, 0)) {
       fprintf(stderr, "%s\n", mysql_error(conn));
       exit(1);
      }


  vector<string> arr;
  string str = arptable;
  string delim("\r\nInternet  ");
  size_t prev = 0;
  size_t next;
  size_t delta = delim.length();

  while( ( next = str.find( delim, prev ) ) != string::npos ){
    //-------------------Отладка-start
    string tmp = str.substr( prev, next-prev );


    if(prev!=0){

       recognize_arp_table(tmp);

       clientproperty[strings_counter][0]=ip_address;
       clientproperty[strings_counter][1]=mac_address;
       clientproperty[strings_counter][2]=age;

       get_name_from_sql();

       strings_counter++;
    }
    //----------------------Отладка-end
    arr.push_back( str.substr( prev, next-prev ) );
    prev = next + delta;

  }
  //--------------------Отладка-start
  string tmp = str.substr( prev );
//  recognize_arp_table(tmp);
  //-----------------------Отладка-end
  arr.push_back( str.substr( prev ) );

mysql_close(conn);

}

//----------------------------------------------------
void recognize_arp_table(string str){

    vector<string> arr;
    string delim(" ");
    size_t prev = 0;
    size_t next;
    size_t delta = delim.length();

  int count = 0;
  while( ( next = str.find(delim, prev) ) != string::npos ){

    //-------------------Отладка-start
    string tmp = str.substr( prev, next-prev );
    if(tmp!=""){
      count++;
      if(count==1){ip_address=tmp;}
      if(count==2){age=tmp;}
      if(count==3){mac_address=tmp;}
    }

    //----------------------Отладка-end
    arr.push_back( str.substr( prev, next-prev ) );
    prev = next + delta;

  }
    count=0;

}

//----------------------------------------------------
void get_name_from_sql(){

sqlquery0="SELECT `manufactur`, `name` FROM `mac_name` WHERE `macaddress` = '"+mac_address+"' AND '"+mac_address+"' <> 'Incomplete'";

if (mysql_query(conn,sqlquery0.c_str() )){
  fprintf(stderr, "%s\n", mysql_error(conn));
  cout << "=== error !!! ===" << endl;
  exit(1);
} else {
res = mysql_use_result(conn);

  while((rowsql = mysql_fetch_row(res))){
            clientproperty[strings_counter][3]=rowsql[0];
            clientproperty[strings_counter][4]=rowsql[1];
      }
   }
}

//----------------------------------------------------
void prepare_answer_for_sending(){
    int str_counter = 0;
    answer = "{";
    while (strings_counter > str_counter){
    answer = answer+"{"+clientproperty[str_counter][0]+":"+clientproperty[str_counter][1]+":"+clientproperty[str_counter][2]+":"+clientproperty[str_counter][3]+":"+clientproperty[str_counter][4]+":"+clientproperty[str_counter][5]+"}";
    str_counter++;
    }
    stranswer = answer+"}";
}


//=============================================================
int main()
{
    tcpdaemon d;
    d.exec();
    return 0;
}
